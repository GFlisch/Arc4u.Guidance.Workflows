name: Build .NET Blazor App

on: 
  workflow_call:
    inputs:
      blazorAppName:
        description: 'Name of the service'     
        required: true
        type: string
      solutionName:
        description: 'Name of the solution'     
        required: true
        type: string
      dotNet:
        description: 'Version of the .Net runtime'     
        required: true
        type: string
      testFilter:
        description: 'Add a filter expression when running the unit test projects'
        required: true
        type: string
     
env:
  host: './src/FE/${{ github.event.inputs.blazorAppName }}/${{ github.event.inputs.solutionName }}.${{ github.event.inputs.blazorAppName }}/${{ github.event.inputs.solutionName }}.${{ github.event.inputs.blazorAppName }}.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'  

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
           dotnet-version: ${{ github.event.inputs.dotNet }}

      - name: Echo testFilter
        run: |
          echo "testFilter parameter is set to : ${{ inputs.testFilter }}"

      - name: Run Test projects matching *UnitTest.csproj
        if: inputs.testFilter == ''
        run: |
            Get-ChildItem -Filter *.${{ inputs.blazorAppName }}.*UnitTest.csproj -Recurse | ForEach-Object { dotnet test $_.FullName -c ${{ env.buildConfiguration }}  }
        shell: pwsh            

      - name: Run Test projects matching *UnitTest.csproj with filter ${{ inputs.testFilter }}
        if: inputs.testFilter != ''
        run: |
            Get-ChildItem -Filter *.${{ inputs.blazorAppName }}.*UnitTest.csproj -Recurse | ForEach-Object { dotnet test $_.FullName -c ${{ env.buildConfiguration }} --filter '${{ inputs.testFilter }}' }
        shell: pwsh            

      - name: Build
        run: dotnet build  ${{ env.host }}  --configuration ${{ env.buildConfiguration }} -o ./Service

      - name: Substitue Dockerfile
        uses: bluwy/substitute-string-action@v1
        id: sub
        with:
          _input-file: './src/BE/Dockerfile'
          _format-key: '%%key%%'
          appName: ${{ github.event.inputs.solutionName }}.${{ github.event.inputs.blazorAppName }}.dll
      
      - name: Create Dockerfile
        uses: DamianReeves/write-file-action@v1.0
        with:
          path: ./Dockerfile
          contents: ${{ steps.sub.outputs.result }}
          write-mode: append

      - name: Copy deploy file
        run: cp ./src/FE/${{ github.event.inputs.blazorAppName }}/deploy.yml ./deploy.yml  

      - name: Move settings files to a config folder.
        run: mv ./Service/wwwroot/appsettings*.json ./Service/Configs  

      - name: Save artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: |
            ./Service
            ./Dockerfile
            ./deploy.yml
          retention-days: 1